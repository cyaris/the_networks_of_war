df = pd.read_csv('/Users/the_networks_of_war/data_sources/csvs/Diplomatic_Exchange_2006v1.csv')


# https://sites.google.com/site/joseantoniocheibub/datasets/democracy-and-dictatorship-revisited
# non cow data-set

gov_df = pd.read_csv('/Users/the_networks_of_war/data_sources/csvs/ddrevisited_data_v1.csv', encoding = 'latin-1')
print(gov_df.columns)

gov_df.rename({'chgterr': 'territory_change',
               'ychgterr': 'territory_change_year',
               'entryy': 'first_recorded_year',
               'exity': 'last_recorded_year',
               'bornyear': 'born_year',
               'endyear': 'died_year',
               'exselec': 'election_type',
               'legselec': 'legislation_type',
               'closed': 'legislature_status',
               'dejure': 'party_legal_status',
               'defacto': 'party_existance',
               'defacto2': 'party_existance_outside_regime',
               'lparty': 'legislature_parties',
               'incumb': 'incumbent_type',
               'collect': 'collective_leadership',
               'eheads': 'num_leadership_changes',
               'ehead': 'leader_name',
               'epost': 'post_name',
               'edate': 'entrance_date',
               'ageeh': 'leader_tenure',
               'emil': 'military_leader',
               'royal': 'royal_leader',
               'comm': 'communist_leader',
               'edeath': 'leader_died',
               'democracy': 'democratic_regime',
               'assconfid': 'cabinet_assembly',
               'poppreselec': 'popular_election',
               'regime': 'regime_type',
               'ttd': 'transition_to_democracy',
               'tta': 'transition_to_dictatorship',
               'agedem': 'age_govt',
               'stra': 'num_transitions_ever',
               'cowcode': 'c_code_a',
               'ctryname': 'participant_a',
               'headdiff': 'nominal_vs_eff_diff',
               'un_region_name': 'un_region',
               'un_continent_name': 'un_continent',
                'cowcode2': 'c_code_b'}, axis = 1, inplace = True)


# co-emissions-per-capita.csv

## borders
pd.read_csv('/Users/charlieyaris/github/international_armed_conflict/Data Sources/contcold.csv', encoding = 'latin-1')





print('Participants Added from Dyadic Data:\n')
war_list = list(set(list(dyad_df['war_num'])))

## filling in values below using MID data
mid_df = pd.read_csv('/Users/the_networks_of_war/data_sources/csvs/dyadic MIDs 3.1.csv', encoding = 'latin-1')
mid_df.rename({'statea': 'c_code_a', 'stateb': 'c_code_b', 'namea': 'participant_a', 'nameb': 'participant_b'}, axis = 1, inplace = True)

print('dyadic MIDs 3.1 columns: \n')
print(sorted(list(mid_df.columns)))
print('\n')

## giving this to the opposite side of the participant they fought against in the war (grabs first record)
## troublesome if they swithced sides but this would be very rare
side_dic = {1: 2, 2: 1, 3: 3}

original_participant_df_length = deepcopy(len(participant_df))
## the following checks for missing data across participant names and c_codes, even though all missing data should have c_codes.
## this is to protect for errors in future data uploads.
for war_num in war_list:
    participant_list = []
    participant_df_copy = deepcopy(participant_df[participant_df['war_num']==war_num].reset_index(drop=True))
    dyad_df_copy = deepcopy(dyad_df[dyad_df['war_num']==war_num].reset_index(drop=True))
    for i, participant in enumerate(participant_df_copy['participant']):
        c_code_input = participant_df_copy.loc[i, 'c_code']
        if c_code_input == -8:
            participant_list.append(participant)
        else:
            participant_list.append(participant_df_copy.loc[i, 'c_code'])
    dyad_list = []
    for i, participant in enumerate(dyad_df_copy['participant_a']):
        c_code_input = dyad_df_copy.loc[i, 'c_code_a']
        if c_code_input == -8:
            dyad_list.append(participant)
        else:
            dyad_list.append(dyad_df_copy.loc[i, 'c_code_a'])
    for i, participant in enumerate(dyad_df_copy['participant_b']):
        c_code_input = dyad_df_copy.loc[i, 'c_code_b']
        if c_code_input == -8:
            dyad_list.append(participant)
        else:
            dyad_list.append(dyad_df_copy.loc[i, 'c_code_b'])
    for participant in dyad_list:
        if participant not in participant_list:
            print(str(war_num)[:-2] + ', ' + war_dic[war_num] + ': ' + str(participant) + ', ' + c_code_dic[participant])
            if int(str(participant)[0]) in np.arange(0, 10):
                joiner_1 = 'c_code_'
            else:
                joiner_1 = 'participant_'
            temp_df_1 = deepcopy(dyad_df_for_missing_values[(dyad_df_for_missing_values['war_num']==war_num) & ((dyad_df_for_missing_values[joiner_1 + 'a']==participant) | (dyad_df_for_missing_values[joiner_1 + 'b']==participant))].reset_index())
            dispute_numbers = list(set(list(temp_df_1['disno'].values)))
            ## should always be 1
            if len(temp_df_1[temp_df_1[joiner_1 + 'a']==participant]) > 0:
                joiner_2 = 'a'
            else:
                joiner_2 = 'b'
            temp_df_2 = deepcopy(mid_df[(mid_df['disno']==dispute_numbers[0]) & ((mid_df[joiner_1 + 'a']==participant)|(mid_df[joiner_1 + 'b']==participant))].reset_index())
            temp_df_2['war_num'] = war_num
            temp_df_2.rename({'strtday': 'start_day',
                              'strtmnth': 'start_month',
                              'strtyr': 'start_year',
                              'endday': 'end_day',
                              'endmnth': 'end_month',
                              'endyear': 'end_year',
                             }, axis = 1, inplace = True)
            temp_df_2 = deepcopy(the_networks_of_war_python_functions.participant_start_and_end_dates(temp_df_2))
            aggregations = {
                'start_date': 'min',
                'end_date': 'max',
                'days_at_war': 'max'
                }

            temp_df_2 = deepcopy(temp_df_2.groupby(['war_num', 'c_code_a', 'participant_a', 'c_code_b', 'participant_b']).agg(aggregations).reset_index())

            ## manually filling in values that are found in dyadic cow datasets but seem to be missing from country level sources.
            ## values have been obtained from dyadic data (directed_dyadic_war.csv' and dyadic MIDs 3.1.csv)

            df_length = deepcopy(len(participant_df))

            participant_df.loc[df_length, 'war_num'] = war_num
            participant_df.loc[df_length, 'war_name'] = war_dic[war_num]
            participant_df.loc[df_length, 'war_type'] = participant_df[participant_df['war_num']==war_num]['war_type'].values[0]
            participant_df.loc[df_length, 'war_type_code'] = participant_df[participant_df['war_num']==war_num]['war_type_code'].values[0]
            participant_df.loc[df_length, 'war_sub_type'] = participant_df[participant_df['war_num']==war_num]['war_sub_type'].values[0]
            if len(temp_df_2[(temp_df_2['c_code_a'] == participant) | (temp_df_2['participant_a'] == participant)]) > 0:
                participant_df.loc[df_length, 'c_code'] = temp_df_2[(temp_df_2['c_code_a'] == participant) | (temp_df_2['participant_a'] == participant)]['c_code_a'].values[0]
                ## assuming it's in c_code_dic
                ## otherwise, this breaks!
                participant_df.loc[df_length, 'participant'] = c_code_dic[temp_df_2[(temp_df_2['c_code_a'] == participant) | (temp_df_2['participant_a'] == participant)]['c_code_a'].values[0]]
                opposite_participant = temp_df_2[(temp_df_2['c_code_a'] == participant) | (temp_df_2['participant_a'] == participant)]['c_code_b'].values[0]
            else:
                participant_df.loc[df_length, 'c_code'] = temp_df_2[(temp_df_2['c_code_b'] == participant) | (temp_df_2['participant_b'] == participant)]['c_code_b'].values[0]
                ## assuming it's in c_code_dic
                ## otherwise, this breaks!
                participant_df.loc[df_length, 'participant'] = c_code_dic[temp_df_2[(temp_df_2['c_code_b'] == participant) | (temp_df_2['participant_b'] == participant)]['c_code_a'].values[0]]
                opposite_participant = temp_df_2[(temp_df_2['c_code_a'] == participant) | (temp_df_2['participant_a'] == participant)]['c_code_b'].values[0]
            participant_df.loc[df_length, 'side'] = side_dic[participant_df[(participant_df['war_num']==war_num) & (participant_df['c_code']==opposite_participant)]['side'].values[0]]
            participant_df.loc[df_length, 'battle_deaths'] = max(list(temp_df_1[temp_df_1[joiner_1 + 'a']==participant]['battle_deaths_a']) + list(temp_df_1[temp_df_1[joiner_1 + 'b']==participant]['battle_deaths_b']))
            participant_df.loc[df_length, 'start_date'] = temp_df_2['start_date'].values[0]
            participant_df.loc[df_length, 'start_year'] = float(str(temp_df_2['start_date'].values[0])[0:4])
            participant_df.loc[df_length, 'end_date'] = pd.to_datetime(str(temp_df_2['end_date'].values[0])[0:11])
            participant_df.loc[df_length, 'end_year'] = float(str(temp_df_2['end_date'].values[0])[0:4])
            ## no idea why days_at_war doesn't work in the function.
            ## adding it manually here
            participant_df.loc[df_length, 'days_at_war'] = participant_df.loc[df_length, 'end_date'] - participant_df.loc[df_length, 'start_date']
            participant_df.loc[df_length, 'days_at_war'] = int(str(participant_df.loc[df_length, 'days_at_war']).split(' ')[0])
            ## prevent duplication in for loop
            ## this may be an issue if they fought with more than one country
            participant_list.append(participant)
        else:
            pass

participant_df['war_num'] = participant_df['war_num'].astype(float)
participant_df['start_year'] = participant_df['start_year'].astype(float)
participant_df['end_year'] = participant_df['end_year'].astype(float)


# def remove_extra_dyads(dyad_df, dy_df):
#     ## inner join to only include dyads found in dyadic war data
#     ## this will limit runtime significantly
#     dy_df = deepcopy(pd.merge(dyad_df, dy_df, how='inner', on=['c_code_a', 'c_code_b', 'year']))
#     return dy_df
